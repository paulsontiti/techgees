generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Challenge {
  id               String    @id @default(uuid()) @map("_id")
  userId           String
  title            String
  subTitle         String?
  description      String?
  imageUrl         String?
  overviewVideoUrl String?
  isPublished      Boolean   @default(false)
  startDate        DateTime?
  endDate          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId              String?
  course                Course?                 @relation(fields: [courseId], references: [id], onDelete: NoAction)
  comments              Comment[]
  challengeParticipants ChallengeParticipants[]

  @@fulltext([title])
}

model ChallengeParticipants {
  id          String @id @default(uuid()) @map("_id")
  userId      String
  challengeId String

  user      DBUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
}

model Course {
  id               String  @id @default(uuid()) @map("_id")
  userId           String
  title            String
  subTitle         String?
  description      String?
  imageUrl         String?
  overviewVideoUrl String?
  price            Float?
  comboDiscount    Float?
  promoDiscount    Float?
  isPublished      Boolean @default(false)
  isFree           Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseCategories CourseCategory[]
  chapters         Chapter[]
  comments         Comment[]

  userProgresses   UserProgress[]
  questions        Question[]
  courseTestScores CourseTestScore[]
  likes            Like[]
  dislikes         DisLike[]
  paystackPayments PaystackPayment[]

  recommendeeCourses        RecommendedCourses[]
  recommendedCourses        RecommendedCourses[]  @relation("recommendedCourse")
  preRequisiteParentCourses PreRequisiteCourses[]
  preRequisiteCourses       PreRequisiteCourses[] @relation("preRequisite")

  purchases       Purchase[]
  ratings         Rating[]
  courseBenefits  CourseBenefit[]
  childrenCourses CourseChild[]   @relation("childCourse")
  parentCourses   CourseChild[]
  assignments     Assignment[]
  walletPayments  WalletPayment[]
  challenges      Challenge[]

  scholarships Scholarship[]

  @@fulltext([title])
}

model CourseChild {
  id       String @id @default(uuid()) @map("_id")
  position Int

  childCourseId String
  childCourse   Course @relation("childCourse", fields: [childCourseId], references: [id], onDelete: Cascade)

  parentCourseId String
  parentCourse   Course @relation(fields: [parentCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([childCourseId, parentCourseId])
}

model Wallet {
  id               String             @id @default(uuid()) @map("_id")
  balance          Int
  userId           String
  user             DBUser             @relation(fields: [userId], references: [id])
  walletWithdrawal WalletWithdrawal[]
  walletDeposit    WalletDeposit[]

  @@unique([userId])
}

model WalletWithdrawal {
  id                String  @id @default(uuid()) @map("_id")
  amount            Int
  walletId          String
  year              Int
  month             Int
  description       String?
  paystackReference String?
  status            String  @default("pending")

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletDeposit {
  id                String  @id @default(uuid()) @map("_id")
  amount            Int
  walletId          String
  year              Int
  month             Int
  description       String?
  paystackReference String?
  status            String  @default("pending")

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionQuestion {
  id       String  @id @default(uuid()) @map("_id")
  question String
  userId   String
  answer   String?

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      DBUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionError {
  id           String  @id @default(uuid()) @map("_id")
  errorMessage String
  imageUrl     String?

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model CourseBenefit {
  id   String @id @default(uuid()) @map("_id")
  text String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model PreRequisiteCourses {
  id                   String @id @default(uuid()) @map("_id")
  parentCourseId       String
  prerequisiteCourseId String

  preRequisitee Course @relation(fields: [parentCourseId], references: [id], onDelete: Cascade)
  preRequisite  Course @relation("preRequisite", fields: [prerequisiteCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parentCourseId, prerequisiteCourseId])
  @@index([parentCourseId])
  @@index([prerequisiteCourseId])
}

model RecommendedCourses {
  id                  String @id @default(uuid()) @map("_id")
  courseId            String
  recommendedCourseId String

  recommendeecourse Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  recommendedCourse Course @relation("recommendedCourse", fields: [recommendedCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, recommendedCourseId])
  @@index([courseId])
  @@index([recommendedCourseId])
}

model Chapter {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgresses UserProgress[]
  sessions       Session[]
  comments       Comment[]

  otherSessions Json[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  questions         Question[]
  chapterTestScores ChapterTestScore[]
  likes             Like[]
  dislikes          DisLike[]
  ratings           Rating[]
  assignments       Assignment[]
  chapterProjects   ChapterProject[]
  chapterAssignment ChapterAssignment[]

  @@unique([id, courseId])
  @@index([courseId])
}

model Session {
  id             String   @id @default(uuid()) @map("_id")
  title          String
  description    String?
  position       Int
  videoUrl       String?
  videoDuration  Int?
  isPublished    Boolean  @default(false)
  bonusVideoUrls String[]

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  otherChapters Json[]

  userProgresses UserProgress[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attachments       Attachment[]
  questions         Question[]
  sessionTestScores SessionTestScore[]
  likes             Like[]
  dislikes          DisLike[]
  comments          Comment[]
  ratings           Rating[]
  sessionQuestions  SessionQuestion[]
  sessionErrors     SessionError[]
  assignments       Assignment[]

  @@index([chapterId])
}

model ChapterProject {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String?
  position    Int
  isPublished Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  chapterProjectSessions ChapterProjectSession[]

  @@index([chapterId])
}

model ChapterProjectSession {
  id             String   @id @default(uuid()) @map("_id")
  title          String
  description    String?
  position       Int
  videoUrl       String?
  videoDuration  Int?
  isPublished    Boolean  @default(false)
  bonusVideoUrls String[]

  chapterProjectId String
  chapterProject   ChapterProject @relation(fields: [chapterProjectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterProjectId])
}

model ChapterAssignmentProgress {
  id     String @id @default(uuid()) @map("_id")
  userId String

  chapterAssignmentId String
  chapterAssignment   ChapterAssignment @relation(fields: [chapterAssignmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterAssignmentId])
}

model ChapterAssignment {
  id   String @id @default(uuid()) @map("_id")
  text String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  chapterAssignmentProgress ChapterAssignmentProgress[]

  @@index([chapterId])
}

model DisLike {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id     String @id @default(uuid()) @map("_id")
  userId String
  value  Float

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(uuid()) @map("_id")
  comment String
  userId  String

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  challengeId String?
  challenge   Challenge? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([chapterId])
  @@index([courseId])
}

model Assignment {
  id   String @id @default(uuid()) @map("_id")
  text String

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  assignmentAnswers AssignmentAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([chapterId])
  @@index([courseId])
}

model AssignmentAnswer {
  id     String  @id @default(uuid()) @map("_id")
  userId String
  answer String
  passed Boolean @default(false)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  assignmentAnswerRemark AssignmentAnswerRemarks?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, assignmentId])
  @@index([assignmentId])
}

model AssignmentAnswerRemarks {
  id     String @id @default(uuid()) @map("_id")
  userId String
  remark String

  assignmentAnswerId String           @unique
  assignmentAnswer   AssignmentAnswer @relation(fields: [assignmentAnswerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String @id @default(uuid()) @map("_id")
  senderId   String
  title      String
  message    String
  receiverId String
  status     Status @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  Pending
  Delivered
  Read
}

model Question {
  id       String @id @default(uuid()) @map("_id")
  question String
  options  Json
  answer   String

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentRealityCheckSurvey {
  id                  String @id @default(uuid()) @map("_id")
  questionsAndAnswers Json[]
  firstName           String
  lastName            String
  phoneNumber         String
  whatsAppNumber      String

  referrerId String?
  referrer   DBUser? @relation(fields: [referrerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phoneNumber])
  @@unique([whatsAppNumber])
}

model SessionTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ChapterTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model CourseTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model PaystackPayment {
  id             String  @id @default(uuid()) @map("_id")
  reference      String
  amount         Float
  payment_status String  @default("pending")
  userId         String
  user           DBUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String?
  course         Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  scholarshipId String?
  scholarship   Scholarship? @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  earnings Earning[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reference])
}

model Scholarship {
  id               String  @id @default(uuid()) @map("_id")
  title            String
  terms            String?
  subTitle         String?
  description      String?
  imageUrl         String?
  overviewVideoUrl String?
  isPublished      Boolean @default(false)
  price            Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: NoAction)

  authorId String
  author   DBUser @relation(fields: [authorId], references: [id], onDelete: NoAction)

  scholarshipStudents ScholarshipStudents[]
  paystackPayments    PaystackPayment[]

  @@unique([courseId])
  @@fulltext([title])
}

model ScholarshipStudents {
  id              String  @id @default(uuid()) @map("_id")
  userId          String
  scholarshipId   String
  purpose         String?
  schoolIdUrl     String?
  nationalIdUrl   String?
  duration        Int?
  numberReferrals Int?
  sponsor         String?

  refererId String?
  referer   DBUser? @relation("scholarshipReferer", fields: [userId], references: [id], onDelete: Cascade)

  user        DBUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, scholarshipId])
}

model WalletPayment {
  id       String @id @default(uuid()) @map("_id")
  amount   Float
  userId   String
  user     DBUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DBUser {
  id        String  @id @default(uuid()) @map("_id")
  userId    String  @default(uuid())
  firstName String?
  lastName  String?
  email     String?
  imageUrl  String?
  phone     String?
  whatsapp  String?
  userName  String?
  password  String?
  salt      String?

  refererId String?
  referer   DBUser?  @relation("referal", fields: [refererId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referees  DBUser[] @relation("referal")

  role             Role              @default(Student)
  paystackPayments PaystackPayment[]
  earnings         Earning[]

  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  sessionQuestion             SessionQuestion[]
  wallet                      Wallet?
  walletPayments              WalletPayment[]
  networkGrowth               NetworkGrowth[]             @relation("user")
  refereeNetworkGrowths       NetworkGrowth[]             @relation("referee")
  ChallengeParticipants       ChallengeParticipants[]
  studentRealityCheckSurveys  StudentRealityCheckSurvey[]
  scholarshipStudents         ScholarshipStudents[]
  scholarship                 Scholarship[]
  scholarshipStudentsReferers ScholarshipStudents[]       @relation("scholarshipReferer")

  @@unique([userId])
}

model Earning {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  amount            Float
  year              Int
  month             Int
  paystackPaymentId String
  commission        Float?

  user            DBUser          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  paystackPayment PaystackPayment @relation(fields: [paystackPaymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NetworkGrowth {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  refereeGeneration Int
  refereeId         String
  year              Int
  month             Int

  user    DBUser @relation("user", fields: [userId], references: [userId], onDelete: Cascade)
  referee DBUser @relation("referee", fields: [refereeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  Admin
  Student
  Teacher
}

enum AttatchmentType {
  Pdf
  Video
  Image
}

model UserProgress {
  id          String  @id @default(uuid()) @map("_id")
  userId      String
  isCompleted Boolean @default(false)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@index([sessionId])
  @@index([courseId])
}

model Attachment {
  id        String          @id @default(uuid()) @map("_id")
  name      String
  url       String
  sessionId String
  session   Session         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  type      AttatchmentType @default(Video)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(uuid()) @map("_id")
  name String @unique

  courseCategories CourseCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CourseCategory {
  id         String @id @default(uuid()) @map("_id")
  courseId   String
  categoryId String

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, categoryId])
  @@index([courseId])
  @@index([categoryId])
}

model Purchase {
  id       String @id @default(uuid()) @map("_id")
  price    Float
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
  @@index([courseId])
}
