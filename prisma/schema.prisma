generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id            String  @id @default(uuid()) @map("_id")
  userId        String
  title         String
  subTitle      String?
  description   String?
  imageUrl      String?
  price         Float?
  comboDiscount Float?
  promoDiscount Float?
  isPublished   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseCategories CourseCategory[]
  chapters         Chapter[]
  comments         Comment[]

  userProgresses   UserProgress[]
  questions        Question[]
  courseTestScores CourseTestScore[]
  likes            Like[]
  dislikes         DisLike[]
  paystackPayments PaystackPayment[]

  recommendeeCourses        RecommendedCourses[]
  recommendedCourses        RecommendedCourses[]  @relation("recommendedCourse")
  preRequisiteParentCourses PreRequisiteCourses[]
  preRequisiteCourses       PreRequisiteCourses[] @relation("preRequisite")
  childrenCourses           ComboCourses[]        @relation("childCourse")
  comboParentCourses        ComboCourses[]
  purchases                 Purchase[]
  ratings                   Rating[]
  whatToLearn               WhatToLearn[]
  courseBenefits             CourseBenefit[]

  @@fulltext([title])
}

model WhatToLearn {
  id   String @id @default(uuid()) @map("_id")
  text String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseBenefit {
  id   String @id @default(uuid()) @map("_id")
  text String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model ComboCourses {
  id             String @id @default(uuid()) @map("_id")
  parentCourseId String
  childCourseId  String

  parentCourse Course @relation(fields: [parentCourseId], references: [id], onDelete: Cascade)
  childCourse  Course @relation("childCourse", fields: [childCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parentCourseId, childCourseId])
  @@index([parentCourseId])
  @@index([childCourseId])
}

model PreRequisiteCourses {
  id                   String @id @default(uuid()) @map("_id")
  parentCourseId       String
  prerequisiteCourseId String

  preRequisitee Course @relation(fields: [parentCourseId], references: [id], onDelete: Cascade)
  preRequisite  Course @relation("preRequisite", fields: [prerequisiteCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parentCourseId, prerequisiteCourseId])
  @@index([parentCourseId])
  @@index([prerequisiteCourseId])
}

model RecommendedCourses {
  id                  String @id @default(uuid()) @map("_id")
  courseId            String
  recommendedCourseId String

  recommendeecourse Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  recommendedCourse Course @relation("recommendedCourse", fields: [recommendedCourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, recommendedCourseId])
  @@index([courseId])
  @@index([recommendedCourseId])
}

model Chapter {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgresses UserProgress[]
  sessions       Session[]
  comments       Comment[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  questions         Question[]
  chapterTestScores ChapterTestScore[]
  likes             Like[]
  dislikes          DisLike[]
  ratings           Rating[]

  @@unique([id, courseId])
  @@index([courseId])
}

model Session {
  id            String  @id @default(uuid()) @map("_id")
  title         String
  description   String?
  position      Int
  videoUrl      String?
  videoDuration Int?
  isPublished   Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userProgresses UserProgress[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attachments       Attachment[]
  questions         Question[]
  sessionTestScores SessionTestScore[]
  likes             Like[]
  dislikes          DisLike[]
  comments          Comment[]
  ratings           Rating[]

  @@index([chapterId])
}

model DisLike {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id     String @id @default(uuid()) @map("_id")
  userId String
  value  Float

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(uuid()) @map("_id")
  comment String
  userId  String

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([chapterId])
  @@index([courseId])
}

model Question {
  id       String @id @default(uuid()) @map("_id")
  question String
  options  Json
  answer   String

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ChapterTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model CourseTestScore {
  id     String @id @default(uuid()) @map("_id")
  score  Int
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model PaystackPayment {
  id             String @id @default(uuid()) @map("_id")
  reference      String
  amount         Float
  payment_status String @default("pending")
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: NoAction)
  courseId       String
  course         Course @relation(fields: [courseId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reference])
}

model User {
  id        String  @id @default(uuid()) @map("_id")
  userId    String
  firstName String
  lastName  String
  email     String
  imageUrl  String
  phone     String?
  role      Role    @default(Student)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paystackPayments PaystackPayment[]

  @@unique([userId])
  
}

enum Role {
  Admin
  Student
  Teacher
}

model UserProgress {
  id          String  @id @default(uuid()) @map("_id")
  userId      String
  isCompleted Boolean @default(false)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@unique([userId, sessionId])
  @@unique([userId, courseId])
  @@index([chapterId])
  @@index([sessionId])
  @@index([courseId])
}

model Attachment {
  id        String  @id @default(uuid()) @map("_id")
  name      String
  url       String
  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(uuid()) @map("_id")
  name String @unique

  courseCategories CourseCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CourseCategory {
  id         String @id @default(uuid()) @map("_id")
  courseId   String
  categoryId String

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, categoryId])
  @@index([courseId])
  @@index([categoryId])
}

model Purchase {
  id       String @id @default(uuid()) @map("_id")
  price    Float
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
  @@index([courseId])
}
